#### Colletions ####

Colletion é um objeto que agrupa múltiplos elementos(variáveis primitivas ou objetos).
dentro de uma única unidade.
Serve para armazenar e processar conjuntos de dados de forma eficiente.
Antes do Java 2 (JDK 1.2), a implantação de coleções na linguagem Java incluía poucas
classes e não tinha a organização de um framework.

#### Composição Collections ####

Interfaces: É um contrato que quando assumido por uma classe deve ser implementado.
Implementação ou Classes: São as materilização, a codificação das interfaces.
Algoritmos: É uma sequência lógica, finita e definida de instruções que devem ser seguidas
para resolver um problema.

#### Coleções com interações ordenadas (Listas) ####

Biblioteca java.util.list
---- Caracteristicas ----
Permite elementos duplicados e garente ordem de inserção.

Quando utilizar ArrayList e LinkedList
ArrayList deve ser usado onde mais operações de pesquisa são necessárias, e LinkedList deve
ser usado onde mais operações de inserção e exclusão são necessárias.

#### Coleções Set ####

Biblioteca java.util.Set
---- Caracteristicas ----
Não permite elementos duplicados
Não possui índice

-- HashSet --
~HashSet internamente utiliza HashMap para armazenar os elementos
~HashSet não mantem a ordem de inserção dos elementos
~HashSet tem um performance maior que LinkedHashSet e TreeSet
~HashSet permite no maximo um elemento nulo

-- LinkedHashSet --
~LinkedHashSet internamente utiliza LinkedHashMap para armazenar os elementos
~LinkedHashSet mantem a ordem de inserção dos elementos
~A performance do LinkedHakshSet está entre HashSet e TreeSet
~LinkedHashSet permite apenas um elemento nulo

-- TreeSet --
~TreeSet internamente utiliza TreeMap para armazenar os elementos
~TreeSet mantem a ordem natural de ordem dos elementos(String por ordem alfabetica, numero por ordem Crescente)
~TreeSet entrega menos performance que HashSet e LinkedHashSet
~TreeSet não permite nenhum elemento nulo

#### Coleção MAP ####

Biblioteca java.util.Map
---- Caracteristicas ----
Elementos únicos (Key) para cada valor (value)


-- HashMap --
~Entregua a mesma performance que o LinkedHashMap
~Intera os elementos aleatóriamente
~Permite chaves nulas
~Não tem sincronização, mas pode utilizar a função Collections.synchronizedMap()

-- LinkedHashMap --
~Entregua a mesma performance que o HashMap
~Ordena por ordem de inserção
~Permite chaves nulas
~Não tem sincronização, mas pode utilizar a função Collections.synchronizedMap()

-- TreeMap --
~Tem a pior performance comparado ao HashMap e LinkedHashMap
~Ordena de acordo com a ordem natural
~Não permite chaves nulas
~Não tem sincronização, mas pode utilizar a função Collections.synchronizedMap()